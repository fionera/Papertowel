<?php

namespace Papertowel;

use Papertowel\Framework\Entity\Website\Website;
use Papertowel\Framework\Modules\Plugin\PluginList;
use Symfony\Bundle\FrameworkBundle\Kernel\MicroKernelTrait;
use Symfony\Component\Config\Loader\LoaderInterface;
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpKernel\HttpKernelInterface;
use Symfony\Component\HttpKernel\Kernel as BaseKernel;
use Symfony\Component\Routing\RouteCollectionBuilder;

class Kernel extends BaseKernel
{
    use MicroKernelTrait;

    public const CONFIG_EXTS = '.{php,xml,yaml,yml}';

    private static $plugins;

    public function __construct(string $environment, bool $debug)
    {
        parent::__construct($environment, $debug);

        self::$plugins = new PluginList();
    }

    public function getCacheDir()
    {
        return $this->getProjectDir() . '/var/cache/' . $this->environment;
    }

    public function getLogDir()
    {
        return $this->getProjectDir() . '/var/log';
    }

    /** @var Request */
    private $request;

    public function handle(Request $request, $type = HttpKernelInterface::MASTER_REQUEST, $catch = true)
    {
        $this->request = $request;

        return parent::handle($request, $type, $catch); // TODO: Change the autogenerated stub
    }

    /**
     * TODO: ITS SO CRAPPY FIX IT PLS!!!
     * @throws Framework\Modules\Theme\Exception\ThemeNotFoundException
     * @deprecated FIX THIS CRAPPY SHIT!!!
     */
    public function boot()
    {
        parent::boot();

        /** @var ContainerInterface $container */
        $container = $this->container;

        $websiteProvider = $container->get('papertowel.framework.website.website_provider');
        $pluginProvider = $container->get('papertowel.framework.plugin.plugin_provider');
        $themeProvider = $container->get('papertowel.framework.theme.theme_provider');

        $host = $this->request === null ? 'localhost' : $this->request->getHost();

        {
            /** @var Website|null $requestedWebsite */
            $requestedWebsite = $websiteProvider->getWebsiteByHost($host);

            if ($requestedWebsite === null) {
                throw new \Exception('Website cannot be found');
            }

            $container->set('website', $requestedWebsite);
        }

        {
            $websitePluginStates = $requestedWebsite->getPluginStates();
            $existingPlugins = $pluginProvider->getPluginNames();

            foreach ($websitePluginStates as $pluginState) {
                if (!$pluginState->isInstalled() || !$pluginState->isEnabled()) {
                    continue;
                }

                $plugin = $pluginState->getPlugin();

                if (!in_array($plugin->getName(), $existingPlugins, true)) {
                    throw new \RuntimeException('Missing Plugin: ' . $plugin->getName());
                }

                if ($pluginState->isInstalled() || $pluginState->isEnabled()) {
                    $pluginProvider->loadPlugin($plugin->getName());
                }

                $pluginInstance = $pluginProvider->getPlugin($plugin->getName());
                if ($pluginInstance !== null && $pluginState->isEnabled()) {
                    $pluginInstance->setEnabled(true);
                }
            }

            self::$plugins->addAll($pluginProvider->getPluginList());
        }

        {
            $reqestedTheme = $themeProvider->getThemeByName($requestedWebsite->getThemeName());

            if ($reqestedTheme === null) {
                throw new \Exception('Theme cannot be found');
            }

            $container->set('theme', $reqestedTheme);
        }

        $this->booted = false;

        // init bundles
        $this->initializeBundles();

        // init container
        $this->initializeContainer();

        foreach ($this->getBundles() as $bundle) {
            $bundle->setContainer($this->container);
            $bundle->boot();
        }

        $this->booted = true;
    }


    public function registerBundles()
    {
        $contents = require $this->getProjectDir() . '/config/bundles.php';
        $contents = array_merge($contents, []);

        foreach ($contents as $class => $envs) {
            if (isset($envs['all']) || isset($envs[$this->environment])) {
                yield new $class();
            }
        }

        foreach (self::$plugins->getActivePlugins() as $plugin) {
            yield $plugin;
        }
    }

    protected function configureContainer(ContainerBuilder $container, LoaderInterface $loader)
    {
        $container->setParameter('container.autowiring.strict_mode', true);
        $container->setParameter('container.dumper.inline_class_loader', true);
        $confDir = $this->getProjectDir() . '/config';
        $loader->load($confDir . '/packages/*' . self::CONFIG_EXTS, 'glob');
        if (is_dir($confDir . '/packages/' . $this->environment)) {
            $loader->load($confDir . '/packages/' . $this->environment . '/**/*' . self::CONFIG_EXTS, 'glob');
        }
        $loader->load($confDir . '/services' . self::CONFIG_EXTS, 'glob');
        $loader->load($confDir . '/services_' . $this->environment . self::CONFIG_EXTS, 'glob');

        //$loader->load($this->getRootDir() .'/Service/**/*'.self::CONFIG_EXTS, 'glob');
    }

    protected function configureRoutes(RouteCollectionBuilder $routes)
    {
        $confDir = $this->getProjectDir() . '/config';
        if (is_dir($confDir . '/routes/')) {
            $routes->import($confDir . '/routes/*' . self::CONFIG_EXTS, '/', 'glob');
        }
        if (is_dir($confDir . '/routes/' . $this->environment)) {
            $routes->import($confDir . '/routes/' . $this->environment . '/**/*' . self::CONFIG_EXTS, '/', 'glob');
        }
        $routes->import($confDir . '/routes' . self::CONFIG_EXTS, '/', 'glob');
    }
}